# Generated by Chef for <%= node['fqdn'] %>
# Local modifications will be overwritten.

# This file must contain only ISO 8859-1 characters
# see http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Properties.html#load(java.io.InputStream)
#
# To use an environment variable, use the following syntax :  ${env:NAME_OF_ENV_VARIABLE}
# For example:
#   sonar.jdbc.url= ${env:SONAR_JDBC_URL}
#
#
# See also the file conf/wrapper.conf for JVM advanced settings

#--------------------------------------------------------------------------------------------------
# DATABASE
#
# IMPORTANT: the embedded H2 database is used by default. It is recommended for tests only.
# Please use a production-ready database. Supported databases are MySQL, Oracle, PostgreSQL
# and Microsoft SQLServer.

# Permissions to create tables, indices and triggers must be granted to JDBC user.
# The schema must be created first.
<%= ConfigHelper.property(node, 'sonar.jdbc.username') %>
<%= ConfigHelper.property(node, 'sonar.jdbc.password') %>

#----- Embedded database H2
# Note: it does not accept connections from remote hosts, so the
# SonarQube server and the maven plugin must be executed on the same host.

# Database URL
<%= ConfigHelper.property(node, 'sonar.jdbc.url') %>

# directory containing H2 database files. By default it's the /data directory in the SonarQube installation.
<%= ConfigHelper.property(node, 'sonar.embeddedDatabase.dataDir') %>
# H2 embedded database server listening port, defaults to 9092
<%= ConfigHelper.property(node, 'sonar.embeddedDatabase.port') %>

#----- Connection pool settings
<%= ConfigHelper.property(node, 'sonar.jdbc.maxActive') %>
<%= ConfigHelper.property(node, 'sonar.jdbc.maxIdle') %>
<%= ConfigHelper.property(node, 'sonar.jdbc.minIdle') %>
<%= ConfigHelper.property(node, 'sonar.jdbc.maxWait') %>
<%= ConfigHelper.property(node, 'sonar.jdbc.minEvictableIdleTimeMillis') %>
<%= ConfigHelper.property(node, 'sonar.jdbc.timeBetweenEvictionRunsMillis') %>


#--------------------------------------------------------------------------------------------------
# WEB SERVER

# Binding IP address. For servers with more than one IP address, this property specifies which
# address will be used for listening on the specified ports.
# By default, ports will be used on all IP addresses associated with the server.
<%= ConfigHelper.property(node, 'sonar.web.host') %>

# Web context. When set, it must start with forward slash (for example /sonarqube).
# The default value is root context (empty value).
<%= ConfigHelper.property(node, 'sonar.web.context') %>

# TCP port for incoming HTTP connections. Disabled when value is -1.
<%= ConfigHelper.property(node, 'sonar.web.port') %>

# TCP port for incoming HTTPS connections. Disabled when value is -1 (default).
<%= ConfigHelper.property(node, 'sonar.web.https.port') %>

# HTTPS - the alias used to for the server certificate in the keystore.
# If not specified the first key read in the keystore is used.
<%= ConfigHelper.property(node, 'sonar.web.https.keyAlias') %>

# HTTPS - the password used to access the server certificate from the
# specified keystore file. The default value is "changeit".
<%= ConfigHelper.property(node, 'sonar.web.https.keyPass') %>

# HTTPS - the pathname of the keystore file where is stored the server certificate.
# By default, the pathname is the file ".keystore" in the user home.
# If keystoreType doesn't need a file use empty value.
<%= ConfigHelper.property(node, 'sonar.web.https.keystoreFile') %>

# HTTPS - the password used to access the specified keystore file. The default
# value is the value of sonar.web.https.keyPass.
<%= ConfigHelper.property(node, 'sonar.web.https.keystorePass') %>

# HTTPS - the type of keystore file to be used for the server certificate.
# The default value is JKS (Java KeyStore).
<%= ConfigHelper.property(node, 'sonar.web.https.keystoreType') %>

# HTTPS - the name of the keystore provider to be used for the server certificate.
# If not specified, the list of registered providers is traversed in preference order
# and the first provider that supports the keystore type is used (see sonar.web.https.keystoreType).
<%= ConfigHelper.property(node, 'sonar.web.https.keystoreProvider') %>

# HTTPS - the pathname of the truststore file which contains trusted certificate authorities.
# By default, this would be the cacerts file in your JRE.
# If truststoreFile doesn't need a file use empty value.
<%= ConfigHelper.property(node, 'sonar.web.https.truststoreFile') %>

# HTTPS - the password used to access the specified truststore file.
<%= ConfigHelper.property(node, 'sonar.web.https.truststorePass') %>

# HTTPS - the type of truststore file to be used.
# The default value is JKS (Java KeyStore).
<%= ConfigHelper.property(node, 'sonar.web.https.truststoreType') %>

# HTTPS - the name of the truststore provider to be used for the server certificate.
# If not specified, the list of registered providers is traversed in preference order
# and the first provider that supports the truststore type is used (see sonar.web.https.truststoreType).
<%= ConfigHelper.property(node, 'sonar.web.https.truststoreProvider') %>

# HTTPS - whether to enable client certificate authentication.
# The default is false (client certificates disabled).
# Other possible values are 'want' (certificates will be requested, but not required),
# and 'true' (certificates are required).
<%= ConfigHelper.property(node, 'sonar.web.https.clientAuth') %>

# The maximum number of connections that the server will accept and process at any given time.
# When this number has been reached, the server will not accept any more connections until
# the number of connections falls below this value. The operating system may still accept connections
# based on the sonar.web.connections.acceptCount property. The default value is 50 for each
# enabled connector.
<%= ConfigHelper.property(node, 'sonar.web.http.maxThreads') %>
<%= ConfigHelper.property(node, 'sonar.web.https.maxThreads') %>

# The minimum number of threads always kept running. The default value is 5 for each
# enabled connector.
<%= ConfigHelper.property(node, 'sonar.web.http.minThreads') %>
<%= ConfigHelper.property(node, 'sonar.web.https.minThreads') %>

# The maximum queue length for incoming connection requests when all possible request processing
# threads are in use. Any requests received when the queue is full will be refused.
# The default value is 25 for each enabled connector.
<%= ConfigHelper.property(node, 'sonar.web.http.acceptCount') %>
<%= ConfigHelper.property(node, 'sonar.web.https.acceptCount') %>

# Access logs are generated in the file logs/access.log. This file is rolled over when it's 5Mb.
# An archive of 3 files is kept in the same directory.
# Access logs are enabled by default.
<%= ConfigHelper.property(node, 'sonar.web.accessLogs.enable') %>

# TCP port for incoming AJP connections. Disabled when value is -1.
<%= ConfigHelper.property(node, 'sonar.ajp.port') %>



#--------------------------------------------------------------------------------------------------
# UPDATE CENTER

# The Update Center requires an internet connection to request http://update.sonarsource.org
# It is enabled by default.
<%= ConfigHelper.property(node, 'sonar.updatecenter.activate') %>

# HTTP proxy (default none)
<%= ConfigHelper.property(node, 'http.proxyHost') %>
<%= ConfigHelper.property(node, 'http.proxyPort') %>

# NT domain name if NTLM proxy is used
<%= ConfigHelper.property(node, 'http.auth.ntlm.domain') %>

# SOCKS proxy (default none)
<%= ConfigHelper.property(node, 'socksProxyHost') %>
<%= ConfigHelper.property(node, 'socksProxyPort') %>

# proxy authentication. The 2 following properties are used for HTTP and SOCKS proxies.
<%= ConfigHelper.property(node, 'http.proxyUser') %>
<%= ConfigHelper.property(node, 'http.proxyPassword') %>


#--------------------------------------------------------------------------------------------------
# NOTIFICATIONS

# Delay (in seconds) between processing of notification queue
<%= ConfigHelper.property(node, 'sonar.notifications.delay') %>

#--------------------------------------------------------------------------------------------------
# PROFILING
# Level of information displayed in the logs: NONE (default), BASIC (functional information) and FULL (functional and technical details)
<%= ConfigHelper.property(node, 'sonar.log.profilingLevel') %>


#--------------------------------------------------------------------------------------------------
# DEVELOPMENT MODE
# Only for debugging

# Set to true to apply Ruby on Rails code changes on the fly
<%= ConfigHelper.property(node, 'sonar.rails.dev') %>

<% node['sonarqube']['extra_properties'].each do |p| %>
<%= p %>
<% end %>
